//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForLocation : JsonConverter<Location>
    {
        private JsonConverterForLocation() {}
        
        public static readonly JsonConverterForLocation Instance = new JsonConverterForLocation();
        
        private static ulong IdKey = 144115188075881545;
        private static JsonEncodedText IdText = JsonEncodedText.Encode("Id", encoder: null);
        
        private static ulong Address1Key = 18407182981541422145;
        private static JsonEncodedText Address1Text = JsonEncodedText.Encode("Address1", encoder: null);
        
        private static ulong Address2Key = 18407182981541422145;
        private static JsonEncodedText Address2Text = JsonEncodedText.Encode("Address2", encoder: null);
        
        private static ulong CityKey = 288230378189384003;
        private static JsonEncodedText CityText = JsonEncodedText.Encode("City", encoder: null);
        
        private static ulong StateKey = 360288405933880403;
        private static JsonEncodedText StateText = JsonEncodedText.Encode("State", encoder: null);
        
        private static ulong PostalCodeKey = 18393664468932587344;
        private static JsonEncodedText PostalCodeText = JsonEncodedText.Encode("PostalCode", encoder: null);
        
        private static ulong NameKey = 288230377853378894;
        private static JsonEncodedText NameText = JsonEncodedText.Encode("Name", encoder: null);
        
        private static ulong PhoneNumberKey = 18407705249498228816;
        private static JsonEncodedText PhoneNumberText = JsonEncodedText.Encode("PhoneNumber", encoder: null);
        
        private static ulong CountryKey = 538587474842447683;
        private static JsonEncodedText CountryText = JsonEncodedText.Encode("Country", encoder: null);
        
        
        public override Location Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            Location value = new Location();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Id'.
                if (Helpers.GetKey(propertyName) == IdKey)
                {
                    value.Id = reader.GetInt32();
                }
                // Determine if JSON property matches 'Address1'.
                else if (Helpers.GetKey(propertyName) == Address1Key)
                {
                    value.Address1 = reader.GetString();
                }
                // Determine if JSON property matches 'Address2'.
                else if (Helpers.GetKey(propertyName) == Address2Key)
                {
                    value.Address2 = reader.GetString();
                }
                // Determine if JSON property matches 'City'.
                else if (Helpers.GetKey(propertyName) == CityKey)
                {
                    value.City = reader.GetString();
                }
                // Determine if JSON property matches 'State'.
                else if (Helpers.GetKey(propertyName) == StateKey)
                {
                    value.State = reader.GetString();
                }
                // Determine if JSON property matches 'PostalCode'.
                else if (Helpers.GetKey(propertyName) == PostalCodeKey)
                {
                    value.PostalCode = reader.GetString();
                }
                // Determine if JSON property matches 'Name'.
                else if (Helpers.GetKey(propertyName) == NameKey)
                {
                    value.Name = reader.GetString();
                }
                // Determine if JSON property matches 'PhoneNumber'.
                else if (Helpers.GetKey(propertyName) == PhoneNumberKey)
                {
                    value.PhoneNumber = reader.GetString();
                }
                // Determine if JSON property matches 'Country'.
                else if (Helpers.GetKey(propertyName) == CountryKey)
                {
                    value.Country = reader.GetString();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, Location value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(IdText, value.Id);
            
            writer.WriteString(Address1Text, value.Address1);
            
            writer.WriteString(Address2Text, value.Address2);
            
            writer.WriteString(CityText, value.City);
            
            writer.WriteString(StateText, value.State);
            
            writer.WriteString(PostalCodeText, value.PostalCode);
            
            writer.WriteString(NameText, value.Name);
            
            writer.WriteString(PhoneNumberText, value.PhoneNumber);
            
            writer.WriteString(CountryText, value.Country);
            
            writer.WriteEndObject();
        }
    }
}
