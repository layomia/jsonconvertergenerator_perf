//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForMyEventsListerItem : JsonConverter<MyEventsListerItem>
    {
        private JsonConverterForMyEventsListerItem() {}
        
        public static readonly JsonConverterForMyEventsListerItem Instance = new JsonConverterForMyEventsListerItem();
        
        private static ulong EventIdKey = 532631420353738309;
        private static JsonEncodedText EventIdText = JsonEncodedText.Encode("EventId", encoder: null);
        
        private static ulong EventNameKey = 18402075814387873349;
        private static JsonEncodedText EventNameText = JsonEncodedText.Encode("EventName", encoder: null);
        
        private static ulong StartDateKey = 18402064819338441811;
        private static JsonEncodedText StartDateText = JsonEncodedText.Encode("StartDate", encoder: null);
        
        private static ulong EndDateKey = 532960092021354053;
        private static JsonEncodedText EndDateText = JsonEncodedText.Encode("EndDate", encoder: null);
        
        private static ulong TimeZoneKey = 18405771161149204820;
        private static JsonEncodedText TimeZoneText = JsonEncodedText.Encode("TimeZone", encoder: null);
        
        private static ulong CampaignKey = 18403794269491781955;
        private static JsonEncodedText CampaignText = JsonEncodedText.Encode("Campaign", encoder: null);
        
        private static ulong OrganizationKey = 18409142349631812175;
        private static JsonEncodedText OrganizationText = JsonEncodedText.Encode("Organization", encoder: null);
        
        private static ulong VolunteerCountKey = 18403243470084665174;
        private static JsonEncodedText VolunteerCountText = JsonEncodedText.Encode("VolunteerCount", encoder: null);
        
        private static ulong TasksKey = 360288465913602388;
        private static JsonEncodedText TasksText = JsonEncodedText.Encode("Tasks", encoder: null);
        
        
        public override MyEventsListerItem Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            MyEventsListerItem value = new MyEventsListerItem();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'EventId'.
                if (Helpers.GetKey(propertyName) == EventIdKey)
                {
                    value.EventId = reader.GetInt32();
                }
                // Determine if JSON property matches 'EventName'.
                else if (Helpers.GetKey(propertyName) == EventNameKey)
                {
                    value.EventName = reader.GetString();
                }
                // Determine if JSON property matches 'StartDate'.
                else if (Helpers.GetKey(propertyName) == StartDateKey)
                {
                    value.StartDate = reader.GetDateTimeOffset();
                }
                // Determine if JSON property matches 'EndDate'.
                else if (Helpers.GetKey(propertyName) == EndDateKey)
                {
                    value.EndDate = reader.GetDateTimeOffset();
                }
                // Determine if JSON property matches 'TimeZone'.
                else if (Helpers.GetKey(propertyName) == TimeZoneKey)
                {
                    value.TimeZone = reader.GetString();
                }
                // Determine if JSON property matches 'Campaign'.
                else if (Helpers.GetKey(propertyName) == CampaignKey)
                {
                    value.Campaign = reader.GetString();
                }
                // Determine if JSON property matches 'Organization'.
                else if (Helpers.GetKey(propertyName) == OrganizationKey)
                {
                    value.Organization = reader.GetString();
                }
                // Determine if JSON property matches 'VolunteerCount'.
                else if (Helpers.GetKey(propertyName) == VolunteerCountKey)
                {
                    value.VolunteerCount = reader.GetInt32();
                }
                // Determine if JSON property matches 'Tasks'.
                else if (Helpers.GetKey(propertyName) == TasksKey)
                {
                    value.Tasks = JsonConverterForListMyEventsListerItemTask.Instance.Read(ref reader, typeToConvert, options);
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, MyEventsListerItem value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(EventIdText, value.EventId);
            
            writer.WriteString(EventNameText, value.EventName);
            
            writer.WriteString(StartDateText, value.StartDate);
            
            writer.WriteString(EndDateText, value.EndDate);
            
            writer.WriteString(TimeZoneText, value.TimeZone);
            
            writer.WriteString(CampaignText, value.Campaign);
            
            writer.WriteString(OrganizationText, value.Organization);
            
            writer.WriteNumber(VolunteerCountText, value.VolunteerCount);
            
            writer.WritePropertyName(TasksText);
            JsonConverterForListMyEventsListerItemTask.Instance.Write(writer, value.Tasks, options);
            
            writer.WriteEndObject();
        }
    }
}
