//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForMyEventsListerViewModel : JsonConverter<MyEventsListerViewModel>
    {
        private JsonConverterForMyEventsListerViewModel() {}
        
        public static readonly JsonConverterForMyEventsListerViewModel Instance = new JsonConverterForMyEventsListerViewModel();
        
        private static ulong CurrentEventsKey = 18407458958960915779;
        private static JsonEncodedText CurrentEventsText = JsonEncodedText.Encode("CurrentEvents", encoder: null);
        
        private static ulong FutureEventsKey = 18394219795335902534;
        private static JsonEncodedText FutureEventsText = JsonEncodedText.Encode("FutureEvents", encoder: null);
        
        private static ulong PastEventsKey = 18403245492997939536;
        private static JsonEncodedText PastEventsText = JsonEncodedText.Encode("PastEvents", encoder: null);
        
        
        public override MyEventsListerViewModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            MyEventsListerViewModel value = new MyEventsListerViewModel();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'CurrentEvents'.
                if (Helpers.GetKey(propertyName) == CurrentEventsKey)
                {
                    value.CurrentEvents = JsonConverterForListMyEventsListerItem.Instance.Read(ref reader, typeToConvert, options);
                }
                // Determine if JSON property matches 'FutureEvents'.
                else if (Helpers.GetKey(propertyName) == FutureEventsKey)
                {
                    value.FutureEvents = JsonConverterForListMyEventsListerItem.Instance.Read(ref reader, typeToConvert, options);
                }
                // Determine if JSON property matches 'PastEvents'.
                else if (Helpers.GetKey(propertyName) == PastEventsKey)
                {
                    value.PastEvents = JsonConverterForListMyEventsListerItem.Instance.Read(ref reader, typeToConvert, options);
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, MyEventsListerViewModel value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WritePropertyName(CurrentEventsText);
            JsonConverterForListMyEventsListerItem.Instance.Write(writer, value.CurrentEvents, options);
            
            writer.WritePropertyName(FutureEventsText);
            JsonConverterForListMyEventsListerItem.Instance.Write(writer, value.FutureEvents, options);
            
            writer.WritePropertyName(PastEventsText);
            JsonConverterForListMyEventsListerItem.Instance.Write(writer, value.PastEvents, options);
            
            writer.WriteEndObject();
        }
    }
}
