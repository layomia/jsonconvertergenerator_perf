//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForDictionaryStringString : JsonConverter<Dictionary<String,String>>
    {
        private JsonConverterForDictionaryStringString() {}
        
        public static readonly JsonConverterForDictionaryStringString Instance = new JsonConverterForDictionaryStringString();
        
        public override Dictionary<String,String> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            Dictionary<String,String> value = new Dictionary<String,String>();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                string key = reader.GetString();
                
                // Move reader cursor to property value.
                reader.Read();
                
                value[key] = reader.GetString();
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, Dictionary<String,String> value, JsonSerializerOptions options)
        {
            // TODO: account for value-type collections.
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            foreach (KeyValuePair<string, String> pair in value)
            {
                writer.WriteString(pair.Key, pair.Value);
            }
            
            writer.WriteEndObject();
        }
    }
}
