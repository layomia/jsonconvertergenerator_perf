//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForActiveOrUpcomingEvent : JsonConverter<ActiveOrUpcomingEvent>
    {
        private JsonConverterForActiveOrUpcomingEvent() {}
        
        public static readonly JsonConverterForActiveOrUpcomingEvent Instance = new JsonConverterForActiveOrUpcomingEvent();
        
        private static ulong IdKey = 144115188075881545;
        private static JsonEncodedText IdText = JsonEncodedText.Encode("Id", encoder: null);
        
        private static ulong ImageUrlKey = 18406868521031134537;
        private static JsonEncodedText ImageUrlText = JsonEncodedText.Encode("ImageUrl", encoder: null);
        
        private static ulong NameKey = 288230377853378894;
        private static JsonEncodedText NameText = JsonEncodedText.Encode("Name", encoder: null);
        
        private static ulong CampaignNameKey = 18403794269491781955;
        private static JsonEncodedText CampaignNameText = JsonEncodedText.Encode("CampaignName", encoder: null);
        
        private static ulong CampaignManagedOrganizerNameKey = 18403794269491781955;
        private static JsonEncodedText CampaignManagedOrganizerNameText = JsonEncodedText.Encode("CampaignManagedOrganizerName", encoder: null);
        
        private static ulong DescriptionKey = 18406327617078912324;
        private static JsonEncodedText DescriptionText = JsonEncodedText.Encode("Description", encoder: null);
        
        private static ulong StartDateKey = 18402064819338441811;
        private static JsonEncodedText StartDateText = JsonEncodedText.Encode("StartDate", encoder: null);
        
        private static ulong EndDateKey = 532960092021354053;
        private static JsonEncodedText EndDateText = JsonEncodedText.Encode("EndDate", encoder: null);
        
        
        public override ActiveOrUpcomingEvent Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            ActiveOrUpcomingEvent value = new ActiveOrUpcomingEvent();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'Id'.
                if (Helpers.GetKey(propertyName) == IdKey)
                {
                    value.Id = reader.GetInt32();
                }
                // Determine if JSON property matches 'ImageUrl'.
                else if (Helpers.GetKey(propertyName) == ImageUrlKey)
                {
                    value.ImageUrl = reader.GetString();
                }
                // Determine if JSON property matches 'Name'.
                else if (Helpers.GetKey(propertyName) == NameKey)
                {
                    value.Name = reader.GetString();
                }
                // Determine if JSON property matches 'CampaignName'.
                else if (Helpers.GetKey(propertyName) == CampaignNameKey)
                {
                    value.CampaignName = reader.GetString();
                }
                // Determine if JSON property matches 'CampaignManagedOrganizerName'.
                else if (Helpers.GetKey(propertyName) == CampaignManagedOrganizerNameKey)
                {
                    value.CampaignManagedOrganizerName = reader.GetString();
                }
                // Determine if JSON property matches 'Description'.
                else if (Helpers.GetKey(propertyName) == DescriptionKey)
                {
                    value.Description = reader.GetString();
                }
                // Determine if JSON property matches 'StartDate'.
                else if (Helpers.GetKey(propertyName) == StartDateKey)
                {
                    value.StartDate = reader.GetDateTimeOffset();
                }
                // Determine if JSON property matches 'EndDate'.
                else if (Helpers.GetKey(propertyName) == EndDateKey)
                {
                    value.EndDate = reader.GetDateTimeOffset();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, ActiveOrUpcomingEvent value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteNumber(IdText, value.Id);
            
            writer.WriteString(ImageUrlText, value.ImageUrl);
            
            writer.WriteString(NameText, value.Name);
            
            writer.WriteString(CampaignNameText, value.CampaignName);
            
            writer.WriteString(CampaignManagedOrganizerNameText, value.CampaignManagedOrganizerName);
            
            writer.WriteString(DescriptionText, value.Description);
            
            writer.WriteString(StartDateText, value.StartDate);
            
            writer.WriteString(EndDateText, value.EndDate);
            
            writer.WriteEndObject();
        }
    }
}
