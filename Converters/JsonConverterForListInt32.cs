//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForListInt32 : JsonConverter<List<Int32>>
    {
        private JsonConverterForListInt32() {}
        
        public static readonly JsonConverterForListInt32 Instance = new JsonConverterForListInt32();
        
        public override List<Int32> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start array token.
            if (reader.TokenType != JsonTokenType.StartArray)
            {
                throw new JsonException();
            }
            
            List<Int32> elements = new List<Int32>();
            
            // Read all elements.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndArray)
                {
                    break;
                }
                
                elements.Add(reader.GetInt32());
            }
            
            return elements;
        }
        
        public override void Write(Utf8JsonWriter writer, List<Int32> value, JsonSerializerOptions options)
        {
            // TODO: account for value-type collections (e.g. ImmutableArray).
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartArray();
            
            foreach (Int32 element in value)
            {
                writer.WriteNumberValue(element);
            }
            
            writer.WriteEndArray();
        }
    }
}
