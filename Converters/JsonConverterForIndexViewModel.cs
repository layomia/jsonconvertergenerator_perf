//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForIndexViewModel : JsonConverter<IndexViewModel>
    {
        private JsonConverterForIndexViewModel() {}
        
        public static readonly JsonConverterForIndexViewModel Instance = new JsonConverterForIndexViewModel();
        
        private static ulong ActiveOrUpcomingEventsKey = 18397034562081547073;
        private static JsonEncodedText ActiveOrUpcomingEventsText = JsonEncodedText.Encode("ActiveOrUpcomingEvents", encoder: null);
        
        private static ulong FeaturedCampaignKey = 18403241301108680006;
        private static JsonEncodedText FeaturedCampaignText = JsonEncodedText.Encode("FeaturedCampaign", encoder: null);
        
        private static ulong IsNewAccountKey = 18402624483422532425;
        private static JsonEncodedText IsNewAccountText = JsonEncodedText.Encode("IsNewAccount", encoder: null);
        
        private static JsonEncodedText HasFeaturedCampaignText = JsonEncodedText.Encode("HasFeaturedCampaign", encoder: null);
        
        
        public override IndexViewModel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            IndexViewModel value = new IndexViewModel();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'ActiveOrUpcomingEvents'.
                if (Helpers.GetKey(propertyName) == ActiveOrUpcomingEventsKey)
                {
                    value.ActiveOrUpcomingEvents = JsonConverterForListActiveOrUpcomingEvent.Instance.Read(ref reader, typeToConvert, options);
                }
                // Determine if JSON property matches 'FeaturedCampaign'.
                else if (Helpers.GetKey(propertyName) == FeaturedCampaignKey)
                {
                    value.FeaturedCampaign = JsonConverterForCampaignSummaryViewModel.Instance.Read(ref reader, typeToConvert, options);
                }
                // Determine if JSON property matches 'IsNewAccount'.
                else if (Helpers.GetKey(propertyName) == IsNewAccountKey)
                {
                    value.IsNewAccount = reader.GetBoolean();
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, IndexViewModel value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WritePropertyName(ActiveOrUpcomingEventsText);
            JsonConverterForListActiveOrUpcomingEvent.Instance.Write(writer, value.ActiveOrUpcomingEvents, options);
            
            writer.WritePropertyName(FeaturedCampaignText);
            JsonConverterForCampaignSummaryViewModel.Instance.Write(writer, value.FeaturedCampaign, options);
            
            writer.WriteBoolean(IsNewAccountText, value.IsNewAccount);
            
            writer.WriteBoolean(HasFeaturedCampaignText, value.HasFeaturedCampaign);
            
            writer.WriteEndObject();
        }
    }
}
