//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:3.1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Buffers;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace JsonConverterGenerator
{
    public sealed class JsonConverterForCollectionsOfPrimitives : JsonConverter<CollectionsOfPrimitives>
    {
        private JsonConverterForCollectionsOfPrimitives() {}
        
        public static readonly JsonConverterForCollectionsOfPrimitives Instance = new JsonConverterForCollectionsOfPrimitives();
        
        private static ulong ByteArrayKey = 18406900252217211202;
        private static JsonEncodedText ByteArrayText = JsonEncodedText.Encode("ByteArray", encoder: null);
        
        private static ulong DateTimeArrayKey = 18405483063333380420;
        private static JsonEncodedText DateTimeArrayText = JsonEncodedText.Encode("DateTimeArray", encoder: null);
        
        private static ulong DictionaryKey = 18405771225824717124;
        private static JsonEncodedText DictionaryText = JsonEncodedText.Encode("Dictionary", encoder: null);
        
        private static ulong ListOfIntKey = 18395346644413671756;
        private static JsonEncodedText ListOfIntText = JsonEncodedText.Encode("ListOfInt", encoder: null);
        
        
        public override CollectionsOfPrimitives Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            // Validate that the reader's cursor is at a start object token.
            if (reader.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException();
            }
            
            // Create returned object. This assumes type has public parameterless ctor.
            CollectionsOfPrimitives value = new CollectionsOfPrimitives();
            
            // Read all properties.
            while (true)
            {
                reader.Read();
                
                if (reader.TokenType == JsonTokenType.EndObject)
                {
                    break;
                }
                
                // Only unescaped property names are allowed.
                ReadOnlySpan<byte> propertyName = reader.HasValueSequence ? reader.ValueSequence.ToArray() : reader.ValueSpan;
                
                // Move reader cursor to property value.
                reader.Read();
                
                // Try to match property name with object properties (case sensitive).
                
                // Determine if JSON property matches 'ByteArray'.
                if (Helpers.GetKey(propertyName) == ByteArrayKey)
                {
                    reader.GetBytesFromBase64();
                }
                // Determine if JSON property matches 'DateTimeArray'.
                else if (Helpers.GetKey(propertyName) == DateTimeArrayKey)
                {
                    value.DateTimeArray = JsonConverterForDateTimeArray.Instance.Read(ref reader, typeToConvert, options);
                }
                // Determine if JSON property matches 'Dictionary'.
                else if (Helpers.GetKey(propertyName) == DictionaryKey)
                {
                    value.Dictionary = JsonConverterForDictionaryStringString.Instance.Read(ref reader, typeToConvert, options);
                }
                // Determine if JSON property matches 'ListOfInt'.
                else if (Helpers.GetKey(propertyName) == ListOfIntKey)
                {
                    value.ListOfInt = JsonConverterForListInt32.Instance.Read(ref reader, typeToConvert, options);
                }
            }
            
            return value;
        }
        
        public override void Write(Utf8JsonWriter writer, CollectionsOfPrimitives value, JsonSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();
            
            writer.WriteBase64String(ByteArrayText, value.ByteArray);
            
            writer.WritePropertyName(DateTimeArrayText);
            JsonConverterForDateTimeArray.Instance.Write(writer, value.DateTimeArray, options);
            
            writer.WritePropertyName(DictionaryText);
            JsonConverterForDictionaryStringString.Instance.Write(writer, value.Dictionary, options);
            
            writer.WritePropertyName(ListOfIntText);
            JsonConverterForListInt32.Instance.Write(writer, value.ListOfInt, options);
            
            writer.WriteEndObject();
        }
    }
}
